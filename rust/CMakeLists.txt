# This is an external project, it should never be included directly.
# It is used in dependencies/lib-stracciatella/CMakeLists.txt

cmake_minimum_required(VERSION 3.1)

project(stracciatella)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/../cmake")

set(LIBSTRACCIATELLA_TARGET "" CACHE STRING "Rust target architecture for libstracciatella")

file(READ "${CMAKE_SOURCE_DIR}/../rust-toolchain" MIN_RUST_VERSION)
find_package(Cargo ${MIN_RUST_VERSION} REQUIRED)
find_package(Rustc ${MIN_RUST_VERSION} REQUIRED)

set(LIBSTRACCIATELLA_BUILD_SWITCHES "")
set(LIBSTRACCIATELLA_BUILD_TYPE "debug")
set(LIBSTRACCIATELLA_BUILD_DIR "${CMAKE_BINARY_DIR}/rust")
set(LIBSTRACCIATELLA_RUSTFLAGS "--print=native-static-libs")
set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${LIBSTRACCIATELLA_BUILD_DIR})

if(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" OR CMAKE_BUILD_TYPE STREQUAL "Release")
    set(LIBSTRACCIATELLA_BUILD_TYPE "release")
    set(LIBSTRACCIATELLA_BUILD_SWITCHES ${LIBSTRACCIATELLA_BUILD_SWITCHES} "--${LIBSTRACCIATELLA_BUILD_TYPE}")
endif()
if (MINGW)
    set(LIBSTRACCIATELLA_RUSTFLAGS "${LIBSTRACCIATELLA_RUSTFLAGS} -C linker=${CMAKE_C_COMPILER}")
endif()

set(LIBSTRACCIATELLA_NAME "${CMAKE_STATIC_LIBRARY_PREFIX}stracciatella_c_api${CMAKE_STATIC_LIBRARY_SUFFIX}")
if (MINGW)
    set(LIBSTRACCIATELLA_NAME "stracciatella_c_api.lib")
endif()
if(LIBSTRACCIATELLA_TARGET)
    set(LIBSTRACCIATELLA_BUILD_SWITCHES ${LIBSTRACCIATELLA_BUILD_SWITCHES} "--target=${LIBSTRACCIATELLA_TARGET}")
    set(LIBRARY_LOCATION "${LIBSTRACCIATELLA_BUILD_DIR}/${LIBSTRACCIATELLA_TARGET}/${LIBSTRACCIATELLA_BUILD_TYPE}/${LIBSTRACCIATELLA_NAME}")
else()
    set(LIBRARY_LOCATION "${LIBSTRACCIATELLA_BUILD_DIR}/${LIBSTRACCIATELLA_BUILD_TYPE}/${LIBSTRACCIATELLA_NAME}")
endif()

set(RESOURCEPACK_NAME "ja2-resource-pack${CMAKE_EXECUTABLE_SUFFIX}")
if(LIBSTRACCIATELLA_TARGET)
    set(RESOURCEPACK_LOCATION "${LIBSTRACCIATELLA_BUILD_DIR}/${LIBSTRACCIATELLA_TARGET}/${LIBSTRACCIATELLA_BUILD_TYPE}/${RESOURCEPACK_NAME}")
else()
    set(RESOURCEPACK_LOCATION "${LIBSTRACCIATELLA_BUILD_DIR}/${LIBSTRACCIATELLA_BUILD_TYPE}/${RESOURCEPACK_NAME}")
endif()

set(HEADER_LOCATION "${LIBSTRACCIATELLA_BUILD_DIR}/stracciatella.h")

set(CARGO_COMMAND ${CMAKE_COMMAND} -E env RUST_BACKTRACE=1 HEADER_LOCATION=${HEADER_LOCATION} RUSTFLAGS=${LIBSTRACCIATELLA_RUSTFLAGS} CARGO_TARGET_DIR=${LIBSTRACCIATELLA_BUILD_DIR} EXTRA_DATA_DIR=${EXTRA_DATA_DIR} RUSTUP_TOOLCHAIN=$ENV{RUSTUP_TOOLCHAIN} ${CARGO_EXECUTABLE})

add_custom_target(cargo-build ALL
    COMMAND ${CARGO_COMMAND} build --verbose ${LIBSTRACCIATELLA_BUILD_SWITCHES}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    USES_TERMINAL
)

install(FILES ${LIBRARY_LOCATION} DESTINATION lib RENAME "${CMAKE_STATIC_LIBRARY_PREFIX}stracciatella${CMAKE_STATIC_LIBRARY_SUFFIX}")
install(FILES ${HEADER_LOCATION} DESTINATION include)
install(PROGRAMS ${RESOURCEPACK_LOCATION} DESTINATION bin)

# convenience targets for development and testing

add_custom_target(cargo-fmt
    COMMAND ${CARGO_COMMAND} fmt
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    USES_TERMINAL
    COMMENT "Formatting the rust code"
)

add_custom_target(cargo-test
    COMMAND ${CARGO_COMMAND} test
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    USES_TERMINAL
    COMMENT "Testing the rust code"
)

add_custom_target(cargo-fmt-test
    COMMAND ${CARGO_COMMAND} fmt -- --check
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    USES_TERMINAL
    COMMENT "Testing the format of the rust code"
)

add_custom_target(cargo-clippy-test
    COMMAND ${CARGO_COMMAND} clippy --all-targets --all-features -- -D warnings
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    USES_TERMINAL
    COMMENT "Linting the rust code"
)
