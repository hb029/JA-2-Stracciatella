// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "StracciatellaLauncher.h"

StracciatellaLauncher::StracciatellaLauncher() {
  { stracciatellaLauncher = new Fl_Double_Window(465, 325, "JA2 Stracciatella Launcher");
    stracciatellaLauncher->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(0, 0, 465, 300);
      o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      { Fl_Group* o = new Fl_Group(0, 50, 465, 250, "@> Play  ");
        o->labelcolor((Fl_Color)24);
        { editorButton = new Fl_Button(130, 120, 200, 25, "Start Map Editor");
        } // Fl_Button* editorButton
        { playButton = new Fl_Button(130, 155, 200, 55, "Play Ja2 Stracciatella");
        } // Fl_Button* playButton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 50, 465, 250, "@filenew Data ");
        o->labelcolor((Fl_Color)24);
        o->hide();
        { Fl_Group* o = new Fl_Group(10, 60, 445, 50);
          { gameDirectoryInput = new Fl_Input(20, 75, 385, 25, "JA2 Game Directory:");
            gameDirectoryInput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            Fl_Group::current()->resizable(gameDirectoryInput);
          } // Fl_Input* gameDirectoryInput
          { browseJa2DirectoryButton = new Fl_Button(415, 75, 30, 25, "@fileopen");
            browseJa2DirectoryButton->tooltip("Choose JA2 game directory.");
          } // Fl_Button* browseJa2DirectoryButton
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 110, 445, 50);
          { gameVersionInput = new Fl_Choice(20, 125, 385, 25, "Game Version:");
            gameVersionInput->down_box(FL_BORDER_BOX);
            gameVersionInput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            Fl_Group::current()->resizable(gameVersionInput);
          } // Fl_Choice* gameVersionInput
          { guessVersionButton = new Fl_Button(415, 125, 30, 25, "@search");
            guessVersionButton->tooltip("Guess Game Version");
          } // Fl_Button* guessVersionButton
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 160, 445, 105);
          { modsCheckBrowser = new Fl_Check_Browser(20, 175, 315, 80, "Mods:");
            modsCheckBrowser->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Check_Browser* modsCheckBrowser
          { addModMenuButton = new Fl_Menu_Button(345, 175, 100, 20, "Add");
          } // Fl_Menu_Button* addModMenuButton
          { moveDownModsButton = new Fl_Button(345, 215, 100, 20, "Move down");
          } // Fl_Button* moveDownModsButton
          { moveUpModsButton = new Fl_Button(345, 195, 100, 20, "Move up");
          } // Fl_Button* moveUpModsButton
          { removeModsButton = new Fl_Button(345, 235, 100, 20, "Remove");
          } // Fl_Button* removeModsButton
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 265, 445, 25, "resizable");
          o->labeltype(FL_NO_LABEL);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 50, 465, 250, "@menu Settings ");
        o->labelcolor((Fl_Color)24);
        o->hide();
        { Fl_Group* o = new Fl_Group(10, 60, 445, 50);
          { gameSettingsOutput = new Fl_Output(20, 75, 425, 25, "Game Settings:");
            gameSettingsOutput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            Fl_Group::current()->resizable(gameSettingsOutput);
          } // Fl_Output* gameSettingsOutput
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 110, 445, 50);
          { scalingModeChoice = new Fl_Choice(20, 125, 425, 25, "Scaling Mode:");
            scalingModeChoice->down_box(FL_BORDER_BOX);
            scalingModeChoice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            Fl_Group::current()->resizable(scalingModeChoice);
          } // Fl_Choice* scalingModeChoice
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 160, 445, 50);
          { resolutionXInput = new Fl_Value_Input(20, 175, 75, 25, "Resolution:");
            resolutionXInput->minimum(640);
            resolutionXInput->maximum(0);
            resolutionXInput->value(640);
            resolutionXInput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Value_Input* resolutionXInput
          { new Fl_Box(95, 175, 20, 25, "x");
          } // Fl_Box* o
          { resolutionYInput = new Fl_Value_Input(115, 175, 75, 25);
            resolutionYInput->labeltype(FL_NO_LABEL);
            resolutionYInput->minimum(480);
            resolutionYInput->maximum(0);
            resolutionYInput->value(480);
            resolutionYInput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Value_Input* resolutionYInput
          { predefinedResolutionMenuButton = new Fl_Menu_Button(210, 175, 110, 25, "Predefined");
          } // Fl_Menu_Button* predefinedResolutionMenuButton
          { Fl_Group* o = new Fl_Group(415, 170, 30, 30, "resizable");
            o->labeltype(FL_NO_LABEL);
            o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
            o->end();
            Fl_Group::current()->resizable(o);
          } // Fl_Group* o
          { invalidResolutionLabel = new Fl_Box(340, 175, 65, 25, "invalid!");
            invalidResolutionLabel->tooltip("the resolution must be at least 640x480, the original game resolution");
            invalidResolutionLabel->labelfont(1);
            invalidResolutionLabel->labelcolor((Fl_Color)1);
            invalidResolutionLabel->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* invalidResolutionLabel
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 210, 445, 50);
          { fullscreenCheckbox = new Fl_Check_Button(20, 220, 95, 15, "Fullscreen");
            fullscreenCheckbox->down_box(FL_DOWN_BOX);
          } // Fl_Check_Button* fullscreenCheckbox
          { playSoundsCheckbox = new Fl_Check_Button(20, 240, 109, 15, "Play Sounds");
            playSoundsCheckbox->down_box(FL_DOWN_BOX);
            playSoundsCheckbox->value(1);
          } // Fl_Check_Button* playSoundsCheckbox
          { Fl_Group* o = new Fl_Group(415, 220, 30, 30, "resizable");
            o->labeltype(FL_NO_LABEL);
            o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
            o->end();
            Fl_Group::current()->resizable(o);
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 260, 445, 30, "resizable");
          o->labeltype(FL_NO_LABEL);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Tabs* o
    { Fl_Group* o = new Fl_Group(0, 300, 465, 25);
      { ja2JsonPathOutput = new Fl_Output(0, 300, 405, 25);
        ja2JsonPathOutput->tooltip("Path to stracciatella engine options");
        ja2JsonPathOutput->color(FL_BACKGROUND_COLOR);
        ja2JsonPathOutput->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Fl_Group::current()->resizable(ja2JsonPathOutput);
      } // Fl_Output* ja2JsonPathOutput
      { ja2JsonReloadBtn = new Fl_Button(405, 300, 30, 25, "@reload");
        ja2JsonReloadBtn->tooltip("Reload stracciatella engine options");
        ja2JsonReloadBtn->box(FL_THIN_UP_BOX);
        ja2JsonReloadBtn->labelcolor(FL_INACTIVE_COLOR);
      } // Fl_Button* ja2JsonReloadBtn
      { ja2JsonSaveBtn = new Fl_Button(435, 300, 30, 25, "@filesave");
        ja2JsonSaveBtn->tooltip("Save stracciatella engine options");
        ja2JsonSaveBtn->box(FL_THIN_UP_BOX);
        ja2JsonSaveBtn->labelcolor(FL_INACTIVE_COLOR);
      } // Fl_Button* ja2JsonSaveBtn
      o->end();
    } // Fl_Group* o
    stracciatellaLauncher->size_range(465, 325);
    stracciatellaLauncher->end();
  } // Fl_Double_Window* stracciatellaLauncher
}
